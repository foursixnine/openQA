#!/usr/bin/env perl
# Copyright (C) 2017 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, see <http://www.gnu.org/licenses/>.

=head1 slave_bridge

slave_bridge - openQA slave bridge

=head1 SYNOPSIS

worker [OPTIONS]

=head2OPTIONS

=over 4

=item B<--master> https://s.ky.net.openqa.opensuse.org

=item B<--master> https://openqa.opensuse.org

=item B<--help, -h>

print help

=back

=head2 DESCRIPTION

(no content)

=head1 CONFIG FILE

L<worker> relies on credentials provided by L<OpenQA::Client>, i.e. tries to
find a config file C<client.conf> resolving C<$OPENQA_CONFIG> or
C<~/.config/openqa> or C</etc/openqa/> in this order of preference.
Additionally L<worker> uses a config file C<workers.ini> to configure worker
settings.

Example:
  [global]
  BACKEND = qemu
  HOST = http://openqa.example.com


=head1 SEE ALSO
L<OpenQA::Client>

=cut

use strict;
use warnings;

BEGIN {
    #prepare for large files
    $ENV{MOJO_MAX_MESSAGE_SIZE}   = 1024 * 1024 * 1024 * 20;
    $ENV{MOJO_INACTIVITY_TIMEOUT} = 300;
    $ENV{MOJO_CONNECT_TIMEOUT}    = 300;
    # the default is EV, and this heavily screws with our children handling
    $ENV{MOJO_REACTOR} = 'Mojo::Reactor::Poll';
    $ENV{MOJO_LOG_LEVEL} = 'debug';
    #$ENV{MOJO_USERAGENT_DEBUG} = 1;
    #$ENV{MOJO_IOLOOP_DEBUG} = 1;
}

use FindBin;
use lib "$FindBin::Bin/../lib";
use Config::IniFiles;
use Getopt::Long;
use Mojo::Base -strict;
use Mojo::UserAgent;
use Mojo::URL;
use Mojo::Log;
use OpenQA::Client;
use Mojo::IOLoop;
use JSON;

use Data::Dumper;

Getopt::Long::Configure("no_ignore_case");

my %options;

sub usage($) {
    my $r = shift;
    eval "use Pod::Usage; pod2usage($r);";
    if ($@) {
        die "cannot display help, install perl(Pod::Usage)\n";
    }
}

GetOptions(
    \%options, "master=s", "slave=s", "verbose|v", "help|h",
) or usage(1);

usage(0) if ($options{help});

my $log = Mojo::Log->new;
$options{master} ||= 'http://0DCD0E0C65A6822A:59D8C0D855F2AABD@deimos.suse.de';
$options{slave}  ||= 'http://6468159B01623A43:FA7B6B37353EDD4F@lanner.arch.suse.de';
$options{limit} ||= 1000;
$options{worker_class} ||= ":provo:qemu_aarch64";

#"/api/v1/jobs.json?&worker_class=aarch64_seattle9&limit=1000";
my $master_url = Mojo::URL->new($options{master})->path("/api/v1/jobs.json")->query({
        limit => $options{limt},
        worker_class => $options{worker_class}
    });

my $master = OpenQA::Client->new(
        api    => $master_url->host,
        apikey => $master_url->username,
        apisecret => $master_url->password,
    );

my $slave_url = Mojo::URL->new($options{slave})->path("/api/v1/jobs");
my $slave = OpenQA::Client->new(
        api    => $slave_url->host,
        apikey => $slave_url->username,
        apisecret => $slave_url->password,
    );

$log->info("Master: ". $master_url->to_abs);
$log->info("Slave: ". $slave_url->to_abs);

my $masterUI = $master->get($master_url->clone);
my $slaveUI = $slave;

sub get_asset_list {
    return {a => 1};
}

sub move_job {
    my ($job) = @_;
    my %settings = %{$job->{settings}};
    if ($job->{group}) {
        $settings{_GROUP} = $job->{group};
    }
    delete $settings{NAME};
    $settings{WORKER_CLASS} =~ s/:provo://;
    $settings{PROXIED} = 1;

    # print JSON->new->pretty->encode(\%settings) if ($options{verbose});
    my $url = $slave_url->clone;
    $settings{federated_report} = $master_url->scheme . '://' . $master_url->host().'/tests/'.$job->{id};
    $log->info("Posting to: ".$url->to_abs);
    $url->query(%settings);
    my $tx = $slaveUI->post($url);
    if ($tx->success) {
        my $remote_id = $tx->success->json->{id};
        if ($remote_id) {
            my $new_url = $slave_url->scheme . '://' . $slave_url->host . '/tests/' . $remote_id;
            $log->info( "Created job #$remote_id: ".$job->{name}." -> $new_url\n");
            update_job($job);
            return {jobid => $remote_id, url => $new_url};
        }
        else {
            die "job not created. duplicate? ", pp($tx->res->body);
        }
    }
    else {
        die "Failed to create job, empty response. Make sure your HTTP proxy is running, e.g. apache, nginx, etc."
          unless $tx->res->body;
        die "Failed to create job: ", pp($tx->res->body);
    }
}

sub fetch_jobs {
    my @crop;
    if($masterUI->res->is_success){
        my $job_count = scalar @{$masterUI->res->json->{jobs}};
        $log->info("Found: $job_count at ". $master_url->to_abs);
        foreach my $job (@{$masterUI->res->json->{jobs}}){
            my $seed = move_job($job);
            push @crop, $seed if $seed;
        }
        #my $asset_list = get_asset_list($masterUI->res->json);
    }
    return @crop;
}

sub update_job {
    my ($job) = @_;

    my $url = $master_url->clone;
    $url->path("jobs/".$job->{id}."/status");
    my $js = {status => {proxied => 1}};
    # $url->query($js);
    $log->info("Updating job: ".$job->{id}." at the MasterUI");
    my $tx = $master->post($url => json => $js);
    if ($tx->success) {
        my $req = $tx->success->json;
        if ($req) {
            $log->debug("Job #".$job->{id}." sucessully updated in the MasterUI");
            return 1;
        } else {
            die "job not created. duplicate? ", Dumper($tx->res->body);
        }
    }
    else {
        die "Failed to create job, empty response. Make sure your HTTP proxy is running, e.g. apache, nginx, etc."
          unless $tx->res->body;
        die "Failed to create job: ", Dumper($tx->res->body);
    }
}

sub proxy_job_monitor {
    ...
}

my $main_loop = Mojo::IOLoop->singleton;

$main_loop->on(new_jobs => sub {
    my $loop = shift;
    $log->info("Jobs available on the MasterUI");
    proxy_job_monitor();
    });

$main_loop->on(job_progress => sub {
    my ($loop, @report_agrs) = shift;
    $log->info("Job progress on the SlaveUI");
    });

#$Add a timer
#$main_loop->recurring(0.2 => sub {
#    my $loop = shift;
#    $loop->emit('job_progress');
#    $log->debug("job progress event");
#});

#Check for new jobs on the master webUI
$main_loop->recurring(5 => sub {
    my $loop = shift;
    # Add a timer
    $log->info("Checking for new jobs on the MasterUI");
    Mojo::IOLoop->subprocess(
        sub {
            my $subprocess = shift;
            $log->debug("Checking for new jobs");
            return fetch_jobs();
        },
        sub {
        my ($subprocess, $err, @results) = @_;
        $subprocess->ioloop->emit('new_jobs', @results);
        map { $log->info("Job ".$_->{jobid}." created at ". $_->{url}) } @results;
    });
    $log->info("New jobs monitoring finished");
});

Mojo::IOLoop->start;

# vim: set sw=4 sts=4 et:
